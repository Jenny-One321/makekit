#!/bin/sh
## 
##  metakit -- the extensible meta-build system
##  Copyright (C) Brian Koropoff
## 
##  This program is free software; you can redistribute it and/or
##  modify it under the terms of the GNU General Public License
##  as published by the Free Software Foundation; either version 2
##  of the License, or (at your option) any later version.
## 
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
## 
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, write to the Free Software
##  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
##

mk_init_component()
{
    name="$1"
    file="${MK_COMPONENT_DIR}/${name}"
    modules="`mk_get_component_var "${name}" MODULE_CLOSURE`"
    MK_COMP="${name}"
    run_file=""
    run_func=""

    mk_log_enter "${name}"
    if mk_component_has_function "${name}" "init"
    then
	run_file="${file}"
	run_func="init"
    else
	for module in `mk_reverse_list ${modules}`
	do
	    if mk_module_has_function "${module}" "default_init"
	    then
		run_file="${MK_MODULE_DIR}/${module}"
		run_func="default_init"
		break;
	    fi
	done
    fi

    if [ -n "${run_file}" ]
    then
	for module in ${modules}
	do
	    if mk_module_has_function "${module}" "pre_init"
	    then
		. "${MK_MODULE_DIR}/${module}" || mk_fail "Could not read module: ${module}"
		pre_init
	    fi
	done
	. "${run_file}" || mk_fail "Could not read component: ${MK_COMP}"
	"${run_func}"
	for module in ${modules}
	do
	    if mk_module_has_function "${module}" "post_init"
	    then
		. "${MK_MODULE_DIR}/${module}" || mk_fail "Could not read module: ${module}"
		post_init
	    fi
	done
    fi
    mk_log_leave
}

MK_HOME="`dirname "$0"`"

if [ -z "${MK_ROOT_DIR}" ]
then
    MK_ROOT_DIR="`pwd`"
fi

. "${MK_HOME}/lib/constants.sh"
. "${MK_HOME}/lib/paths.sh"
. "${MK_HOME}/lib/util.sh"
. "${MK_HOME}/lib/generate.sh"

MK_PROJECT_NAME=""
OPT_INIT=true
OPT_INIT_COMPS=""
OPT_INSTALL=false
OPT_FORCE=false

while [ -n "$1" ]
do
    param="$1"
    shift
    case "$param" in
	--init-components)
	    OPT_INIT_COMPS="$1"
	    shift
	    ;;
	--no-init)
	    OPT_INIT=false
	    ;;
	--install)
	    OPT_INSTALL=true
	    ;;
	--force)
	    OPT_FORCE=true
	    ;;
	*)
	    mk_fail "unrecognized parameter $param"
	    ;;
    esac
done

if [ -f "${MK_MANIFEST_FILE}.in" ]
then
    MK_PROJECT_NAME="`mk_extract_var "${MK_MANIFEST_FILE}.in" PROJECT_NAME`" || mk_fail "could not read manifest"
else
    mk_fail "manifest input file ${MK_MANIFEST_FILE}.in not found"
fi

if [ -n "${MK_PROJECT_NAME}" ]
then
    mk_log "Initializing metakit for project ${MK_PROJECT_NAME}"
else
    mk_log "Initializing metakit"
fi

if $OPT_INSTALL
then
    mk_log "Installing default modules"
    mk_log_enter "module"
    mkdir -p "${MK_MODULE_DIR}"
    for file in "${MK_HOME}/${MK_MODULE_DIRNAME}/"*
    do
	name="`basename "${file}"`"
	if [ "${OPT_FORCE}" != "true" -a -f "${MK_MODULE_DIR}/${name}" ]
	then
	    mk_log "Skipping ${name}"
	else
	    mk_log "Installing ${name}"
	    cp -f "${file}" "${MK_MODULE_DIR}/."
	fi
    done
    mk_log_leave
fi

mk_log "Loading modules"
mk_load_modules

mk_log "Generating ${MK_MANIFEST_FILENAME}"
mk_log_enter "${MK_MANIFEST_FILENAME}"
mk_generate_manifest > "${MK_MANIFEST_FILE}"
mk_log_leave

mk_log "Generating ${MK_CONFIGURE_FILENAME}"
mk_log_enter "${MK_CONFIGURE_FILENAME}"
mk_process_template \
    < "${MK_HOME}/template/configure.sh" \
    > "${MK_ROOT_DIR}/${MK_CONFIGURE_FILENAME}"
chmod +x "${MK_ROOT_DIR}/${MK_CONFIGURE_FILENAME}"
mk_log_leave

mk_log "Generating ${MK_ACTION_FILENAME}.in"
mk_log_enter "${MK_ACTION_FILENAME}.in"
mk_process_template \
    < "${MK_HOME}/template/action.sh" \
    > "${MK_ROOT_DIR}/${MK_ACTION_FILENAME}.in"
mk_log_leave

mk_log "Generating ${MK_MAKEFILE_FILENAME}.in"
mk_log_enter "${MK_MAKEFILE_FILENAME}.in"
mk_process_template \
    < "${MK_HOME}/template/makefile" \
    > "${MK_ROOT_DIR}/${MK_MAKEFILE_FILENAME}.in"
mk_log_leave

if $OPT_INIT
then
    mk_log "Initializing components"
    files=""
    if [ -n "${OPT_INIT_COMPS}" ]
    then
	for name in ${OPT_INIT_COMPS}
	do
	    files="${files} ${MK_COMPONENT_DIR}/${name}"
	done
    else
	files="${MK_COMPONENT_DIR}/"*
    fi
    
    for file in ${files}
    do
	mk_init_component "`basename "$file"`"
    done
fi
