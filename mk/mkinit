#!/bin/sh
## 
##  metakit -- the extensible meta-build system
##  Copyright (C) Brian Koropoff
## 
##  This program is free software; you can redistribute it and/or
##  modify it under the terms of the GNU General Public License
##  as published by the Free Software Foundation; either version 2
##  of the License, or (at your option) any later version.
## 
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
## 
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, write to the Free Software
##  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
##

mk_load_modules()
{
    __phases=""
    __phony=""
    mk_log_enter "module"
    for file in "${MK_MODULE_DIR}/"*
    do
	module="$(basename "${file}")"
	. "${file}" || mk_fail "Failed to source module ${module}"
	if mk_function_exists "load"
	then
	    mk_log "${module}"
	    load
	    unset -f load
	fi
	__phases="$__phases `mk_extract_var "${file}" "PHASES"`"
	__phony="$__phases `mk_extract_var "${file}" "PHONY"`"
    done

    MK_ALL_PHASES="`mk_unique_list ${__phases}`"
    MK_ALL_PHONY="`mk_unique_list ${__phony}`"

    mk_log_leave
}

mk_init_component()
{
    name="$1"
    file="${MK_COMPONENT_DIR}/${name}"
    mk_log_enter "${name}"
    MK_COMP_SOURCE_DIR="${MK_SOURCE_DIR}/${name}"
    [ -d "${MK_COMP_SOURCE_DIR}" ] || mk_fail "Source not present for component ${name}"
    ( 
	cd "${MK_COMP_SOURCE_DIR}"
	. "${file}" || mk_fail "Failed to source component ${file}"
	if mk_function_exists "init"
	then
	    init || mk_fail "Failed to initialize component ${name}"
	    unset -f init
	fi
    ) || exit $?
    mk_log_leave
}

MK_HOME="`dirname "$0"`"

if [ -z "${MK_ROOT_DIR}" ]
then
    MK_ROOT_DIR="`pwd`"
fi

. "${MK_HOME}/lib/constants.sh"
. "${MK_HOME}/lib/paths.sh"
. "${MK_HOME}/lib/util.sh"
. "${MK_HOME}/lib/generate.sh"

MK_PROJECT_NAME=""
OPT_INIT=true
OPT_INSTALL=false
OPT_FORCE=false

while [ -n "$1" ]
do
    param="$1"
    shift
    case "$param" in
	--no-init)
	    OPT_INIT=false
	    ;;
	--install)
	    OPT_INSTALL=true
	    ;;
	--force)
	    OPT_FORCE=true
	    ;;
	*)
	    mk_fail "unrecognized parameter $param"
	    ;;
    esac
done

if [ -f "${MK_MANIFEST_FILE}.in" ]
then
    MK_PROJECT_NAME="`mk_extract_var "${MK_MANIFEST_FILE}.in" PROJECT_NAME`" || mk_fail "could not read manifest"
else
    mk_fail "manifest input file ${MK_MANIFEST_FILE}.in not found"
fi

if [ -n "${MK_PROJECT_NAME}" ]
then
    mk_log "Initializing metakit for project ${MK_PROJECT_NAME}"
else
    mk_log "Initializing metakit"
fi

if $OPT_INSTALL
then
    mk_log "Installing default modules"
    mk_log_enter "module"
    mkdir -p "${MK_MODULE_DIR}"
    for file in "${MK_HOME}/${MK_MODULE_DIRNAME}/"*
    do
	name="`basename "${file}"`"
	if [ "${OPT_FORCE}" != "true" -a -f "${MK_MODULE_DIR}/${name}" ]
	then
	    mk_log "Skipping ${name}"
	else
	    mk_log "Installing ${name}"
	    cp -f "${file}" "${MK_MODULE_DIR}/."
	fi
    done
    mk_log_leave
fi

mk_log "Loading modules"
mk_load_modules

if $OPT_INIT
then
    # Run init functions for all components
    mk_log "Initializing components"
    for file in "${MK_COMPONENT_DIR}/"*
    do
	mk_init_component "`basename "$file"`"
    done
fi

mk_log "Generating ${MK_CONFIGURE_FILENAME}"
mk_process_template \
    < "${MK_HOME}/template/configure.sh" \
    > "${MK_ROOT_DIR}/${MK_CONFIGURE_FILENAME}"
chmod +x "${MK_ROOT_DIR}/${MK_CONFIGURE_FILENAME}"

mk_log "Generating ${MK_ACTION_FILENAME}.in"
mk_process_template \
    < "${MK_HOME}/template/action.sh" \
    > "${MK_ROOT_DIR}/${MK_ACTION_FILENAME}.in"

mk_log "Generating ${MK_MAKEFILE_FILENAME}.in"
mk_process_template \
    < "${MK_HOME}/template/makefile" \
    > "${MK_ROOT_DIR}/${MK_MAKEFILE_FILENAME}.in"

mk_log "Generating ${MK_MANIFEST_FILENAME}"
mk_generate_manifest > "${MK_MANIFEST_FILE}"
