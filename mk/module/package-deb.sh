DEPENDS="core program"

### section configure

# API
# mk_deb_do
#   mk_subpackage_do
#     mk_package_files
#     mk_package_dirs
#   mk_subpackage_done
# mk_deb_done

configure()
{
    if mk_check_program PROGRAM=dpkg-buildpackage
    then
        mk_msg "debian package building: enabled"
        mk_export MK_PACKAGE_DEB_ENABLED=yes
    else
        mk_msg "debian package building: disabled"
        mk_export MK_PACKAGE_DEB_ENABLED=no
    fi

    mk_add_scrub_target "@package"
}

mk_deb_enabled()
{
    [ "$MK_PACKAGE_DEB_ENABLED" = "yes" ]
}

mk_deb_do()
{
    mk_push_vars PACKAGE DEBIANFILES VERSION
    mk_parse_params
    
    DEB_PKGDIR=".deb-${PACKAGE}/build"
    DEB_PACKAGE="$PACKAGE"
    DEB_VERSION="$VERSION"
    DEB_SUBPACKAGES=""
    DEB_SUBPACKAGE=""
    DEB_DEPS=""

    mk_resolve_file "$DEB_PKGDIR"
    mk_safe_rm "$result"
    
    for _i in ${DEBIANFILES}
    do
        _basename="${_i##*/}"
        mk_output_file INPUT="$_i" OUTPUT="${DEB_PKGDIR}/debian/${_basename%.in}"
        mk_quote "$result"
        DEB_DEPS="$DEB_DEPS $result"
    done
    
    mk_resolve_file "${DEB_PKGDIR}/debian/${DEB_PACKAGE}.install"
    DEB_INSTALLFILE="$result"
    echo "# Generated by MakeKit" > "$DEB_INSTALLFILE" || mk_fail "could not write $DEB_INSTALLFILE"
    mk_add_configure_output "$DEB_INSTALLFILE"
    mk_quote "@$DEB_INSTALLFILE"
    DEB_DEPS="$DEB_DEPS $result"

    mk_resolve_file "${DEB_PKGDIR}/debian/${DEB_PACKAGE}.dirs"
    DEB_DIRFILE="$result"
    echo "# Generated by MakeKit" > "$DEB_DIRFILE" || mk_fail "could not write $DEB_DIRFILE"
    mk_add_configure_output "$DEB_DIRFILE"
    mk_quote "@$DEB_DIRFILE"
    DEB_DEPS="$DEB_DEPS $result"
    
    mk_subpackage_do()
    {
        mk_push_vars SUBPACKAGE
        mk_parse_params

        [ -z "$SUBPACKAGE" ] && SUBPACKAGE="$1"
        DEB_SUBPACKAGE="$SUBPACKAGE"
        DEB_SUBPACKAGES="$DEB_SUBPACKAGES $SUBPACKAGE"

        mk_resolve_file "${DEB_PKGDIR}/debian/${DEB_PACKAGE}-${DEB_SUBPACKAGE}.install"
        DEB_SUBINSTALLFILE="$result"
        echo "# Generated by MakeKit" > "$DEB_SUBINSTALLFILE" || mk_fail "could not write $DEB_SUBINSTALLFILE"
        mk_add_configure_output "$DEB_SUBINSTALLFILE"
        mk_quote "@$DEB_SUBINSTALLFILE"
        DEB_DEPS="$DEB_DEPS $result"

        mk_resolve_file "${DEB_PKGDIR}/debian/${DEB_PACKAGE}-${DEB_SUBPACKAGE}.dirs"
        DEB_SUBDIRFILE="$result"
        echo "# Generated by MakeKit" > "$DEB_SUBDIRFILE" || mk_fail "could not write $DEB_SUBDIRFILE"
        mk_add_configure_output "$DEB_SUBDIRFILE"
        mk_quote "@$DEB_SUBDIRFILE"
        DEB_DEPS="$DEB_DEPS $result"

        mk_pop_vars
    }

    mk_subpackage_done()
    {
        unset DEB_SUBPACKAGE DEB_SUBINSTALLFILE DEB_SUBDIRFILE
    }

    mk_package_files()
    {
        if [ -n "$DEB_SUBPACKAGE" ]
        then
            installfile="$DEB_SUBINSTALLFILE"
        else
            installfile="$DEB_INSTALLFILE"
        fi

        for _i in "$@"
        do
            echo "$_i"
        done >> "$installfile"
    }
    
    mk_package_dirs()
    {
        if [ -n "$DEB_SUBPACKAGE" ]
        then
            dirfile="$DEB_SUBDIRFILE"
        else
            dirfile="$DEB_DIRFILE"
        fi

        for _i in "$@"
        do
            echo "$_i"
        done >> "$dirfile"
    }

    mk_pop_vars
}

mk_deb_done()
{
    mk_target \
        TARGET="@package/deb/${DEB_PACKAGE}" \
        DEPS="$DEB_DEPS @all" \
        _mk_build_deb "${DEB_PACKAGE}" "&${DEB_PKGDIR}"
    master="$result"

    mk_add_phony_target "$master"
    mk_add_subdir_target "$master"

    unset DEB_PACKAGE DEB_SUBPACKAGE DEB_INSTALLFILE DEB_SUBINSTALLFILE DEB_PKGDIR
    unset DEB_SUBPACKAGES
    unset -f mk_package_files mk_package_dirs mk_subpackage_do mk_subpackage_done

    result="$master"
}

### section build

_mk_build_deb()
{
    MK_MSG_DOMAIN="deb"

    mk_msg "begin $1"
    cd "$2" || mk_fail "could not cd to $2"
    mk_run_quiet_or_fail dpkg-buildpackage -rfakeroot -uc -b
    mk_mkdir "${MK_ROOT_DIR}/package/deb/${1}"
    for i in ../*.deb
    do
        mk_run_or_fail mv -f "$i" "${MK_ROOT_DIR}/package/deb/${1}"
        mk_msg "built ${i##*/}"
    done
    mk_msg "end $1"
}
