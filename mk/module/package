## 
##  metakit -- the extensible meta-build system
##  Copyright (C) Brian Koropoff
## 
##  This program is free software; you can redistribute it and/or
##  modify it under the terms of the GNU General Public License
##  as published by the Free Software Foundation; either version 2
##  of the License, or (at your option) any later version.
## 
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
## 
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, write to the Free Software
##  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
## 
##  The source code contained within this file is also subject to the
##  following additional terms:
## 
##  1. "Program" below refers to metakit or any derivative work thereof
##     under copyright law. "Unmodified" below refers to the Program
##     prior to any modification by the licensee, in a form which was
##     distributed while fully abiding by the terms of the GNU General
##     Public License and these additional clauses. "Unmodified Version"
##     refers to the Unmodified Program or the portion thereof from which
##     the licensee's modified version is derived.  Each licensee is
##     addressed as "you."
## 
##  2. As a special exception to the terms of the GNU General Public License,
##     you are granted unlimited permission to copy, distribute, and modify
##     the output of the Program, even when such output contains portions
##     of the Program source code which are otherwise governed by the terms
##     of the GNU General Public License.  When distributing a modified
##     version of the Program, you may choose to extend this special
##     exception to your modified version as well.
## 
##  3. The exception in clause 2 applies only to portions of the Program which
##     appear in a file containing these additional clauses.  You may not
##     extend this exception to portions of the Program which are contained
##     in a file that does not contain these clauses.  In addition, you may
##     not extend the exception to your modified version under any of the
##     following circumstances:
## 
##     a)  You move, copy, combine, or otherwise modify portions of the
##         Program such that a file is produced which:
##         
##         i.  Contains portions of the Program which, in the Unmodified
##             Version, were contained in a file which contained these
##             additional clauses; and
## 
##         ii. Contains portions of the Program which, in the Unmodified
##             Version, were contained in a file which did not contain these
##             additional clauses.
## 
##     b)  You modify the behavior of the Program such that it may copy portions
##         of the Program into its output where said portions, in the Unmodified
##         Version, were contained in a file which did not contain these clauses.
## 
##  4.  If any of the circumstances in clause 3 apply, you must remove these clauses
##      from the affected portions of your version of the Program in order to
##      distribute it.  In the case of (3.i), this means the offending file which
##      contains the inappropriately combined portions of the Program.  In the case
##      of (3.ii), it means the entirety of the Program.
##

# This module defines the build strategy for binary packages

DEPENDS="platform installpath"
PHASES="build package clean"
VIRTUALS="all clean"

PHASE_BUILD="once"
PHASE_PACKAGE="once: build-%{NAME}"
PHASE_CLEAN="always"

VIRTUAL_CLEAN="clean-%{COMPONENTS}"
VIRTUAL_ALL="package-%{COMPONENTS}"

OPTIONS='
package-type           type       Specify desired package type
platforms              list       Specify target platforms
'

load()
{
    MK_BUILD_DIRNAME="build"
    MK_BUILD_DIR="${MK_WORK_DIR}/${MK_BUILD_DIRNAME}"

    MK_PACKAGE_TYPE_TESTS=""
    MK_PACKAGE_TYPES=""

    mk_package_add_type()
    {
	MK_PACKAGE_TYPES="$MK_PACKAGE_TYPES $1"
	MK_PACKAGE_TYPE_TESTS="$MK_PACKAGE_TYPE_TESTS $2"
    }

    __mk_package_detect_type()
    {
	for __test in ${MK_PACKAGE_TYPE_TESTS}
	do
	    if ${__test}
	    then
		return 0
	    fi
	done

	return 1
    }
}

configure()
{
    if [ -z "$MK_PACKAGE_TYPE" ]
    then
	__mk_package_detect_type || mk_fail "Could not detect package type"
    fi

    if ! mk_contains "${MK_PACKAGE_TYPES}" "${MK_PACKAGE_TYPE}"
    then
	mk_fail "Invalid package type: ${MK_PACKAGE_TYPE}.  Supported:${MK_PACKAGE_TYPES}"
    fi

    if [ -z "$MK_PACKAGE_PLATFORMS" ]
    then
	MK_PACKAGE_PLATFORMS="${MK_ARCH}-${MK_OS}"
    fi

    mk_log "Package type: ${MK_PACKAGE_TYPE}"
    mk_log "Package platforms: ${MK_PACKAGE_PLATFORMS}"

    mk_export MK_PACKAGE_PLATFORMS MK_PACKAGE_TYPE
}

output()
{
    [ -n "$MK_PROJECT_SOURCE_PROJECT" ] || mk_fail "No source project specified"

    for __plat in ${MK_PACKAGE_PLATFORMS}
    do
	__arch="`echo $__plat | cut -d'-' -f1`"
	__os="`echo $__plat | cut -d'-' -f2`"
	__dir="${__arch}/${__os}"
	mk_log "Configuring source project for ${__plat}"
	mkdir -p "${MK_BUILD_DIR}/${__dir}" || mk_fail "Could not create directory"
	mk_configure_project "${MK_PROJECT_SOURCE_PROJECT}" "${MK_BUILD_DIR}/${__dir}"
    done
}

default_build()
{
    mk_log "Building source components for ${MK_COMP}"

    __targets=""

    for __comp in `mk_get_component_var "${MK_COMP}" "SOURCE_COMPONENTS"`
    do
	__targets="${__targets} stage-${__comp}"
    done

    mk_log_enter "platform"

    for __dir in "${MK_BUILD_DIR}"/*/*
    do
	if [ -d "${__dir}" ]
	then
	    ${MAKE} -C "${__dir}" ${__targets}
	fi
    done
}

default_clean()
{
    mk_log "Cleaning files"
    mk_log_enter "file"
    for _file in "${MK_TARGET_DIR}/"*"-${MK_COMP}"
    do
	if [ -f "${_file}" ]
	then
	    mk_log "${_file##$MK_WORK_DIR/}"
	    mk_safe_rm "${_file}"
	fi
    done
    mk_log_leave
}
