## 
##  metakit -- the extensible meta-build system
##  Copyright (C) Brian Koropoff
## 
##  This program is free software; you can redistribute it and/or
##  modify it under the terms of the GNU General Public License
##  as published by the Free Software Foundation; either version 2
##  of the License, or (at your option) any later version.
## 
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
## 
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, write to the Free Software
##  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
## 
##  The source code contained within this file is also subject to the
##  following additional terms:
## 
##  1. "Program" below refers to metakit or any derivative work thereof
##     under copyright law. "Unmodified" below refers to the Program
##     prior to any modification by the licensee, in a form which was
##     distributed while fully abiding by the terms of the GNU General
##     Public License and these additional clauses. "Unmodified Version"
##     refers to the Unmodified Program or the portion thereof from which
##     the licensee's modified version is derived.  Each licensee is
##     addressed as "you."
## 
##  2. As a special exception to the terms of the GNU General Public License,
##     you are granted unlimited permission to copy, distribute, and modify
##     the output of the Program, even when such output contains portions
##     of the Program source code which are otherwise governed by the terms
##     of the GNU General Public License.  When distributing a modified
##     version of the Program, you may choose to extend this special
##     exception to your modified version as well.
## 
##  3. The exception in clause 2 applies only to portions of the Program which
##     appear in a file containing these additional clauses.  You may not
##     extend this exception to portions of the Program which are contained
##     in a file that does not contain these clauses.  In addition, you may
##     not extend the exception to your modified version under any of the
##     following circumstances:
## 
##     a)  You move, copy, combine, or otherwise modify portions of the
##         Program such that a file is produced which:
##         
##         i.  Contains portions of the Program which, in the Unmodified
##             Version, were contained in a file which contained these
##             additional clauses; and
## 
##         ii. Contains portions of the Program which, in the Unmodified
##             Version, were contained in a file which did not contain these
##             additional clauses.
## 
##     b)  You modify the behavior of the Program such that it may copy portions
##         of the Program into its output where said portions, in the Unmodified
##         Version, were contained in a file which did not contain these clauses.
## 
##  4.  If any of the circumstances in clause 3 apply, you must remove these clauses
##      from the affected portions of your version of the Program in order to
##      distribute it.  In the case of (3.i), this means the offending file which
##      contains the inappropriately combined portions of the Program.  In the case
##      of (3.ii), it means the entirety of the Program.
##

DEPENDS="installpath source compiler platform"

load()
{
    __libtool_rewrite_stage()
    {
	if echo "$1" | grep "^-L${MK_STAGE_DIR}" >/dev/null
	then
	    # Appears to be a -L pointing into a staging directory
	    # Remove it since the autotools module will add it LDFLAGS automatically
	    return 0
	elif echo "$1" | grep "^${MK_LIBDIR}/.*\.la" >/dev/null
	then
	    # Appears to be a dependency on another .la file in the
	    # final install path -- prepend it with the staging path of
	    # whatever module contains it
	    for __comp in ${MK_COMP_DEPENDS} ${MK_COMP}
	    do
		if [ -f "${MK_STAGE_DIR}/${__comp}$1" ]
		then
		    echo "${MK_STAGE_DIR}/${__comp}$1"
		    return 0
		fi
	    done
	else
	    # Just pass it through verbatim
	    echo "$1"
	fi
    }

    __libtool_rewrite_install()
    {
	if [ "$1" = "-L${MK_LIBDIR}" ]
	then
	    # Filter references to the final libdir since we'll add one back
	    return 0
	elif echo "$1" | grep "^${MK_STAGE_DIR}/.*${MK_LIBDIR}/.*\.la" >/dev/null
	then
	    # Appears to be a dependency on another .la file in the
	    # a staging directory -- remove the staging directory from
	    # the path
	    echo "$1" | sed "s:^${MK_STAGE_DIR}/[^/]*::"
	else
	    # Just pass it through verbatim
	    echo "$1"
	fi
    }

    auto_configure()
    {
	if [ -z "${AUTO_CONFIGURE_FILE}" ]
	then
	    AUTO_CONFIGURE_FILE="${MK_COMP_SOURCE_DIR}/configure"
	fi

	if [ -f Makefile ]
	then
	    mk_build_command "${MAKE}" Makefile || mk_fail "could not regenerate configure"
	else
	    mk_build_command "${AUTO_CONFIGURE_FILE}" \
		CC="${CC}" \
		CPPFLAGS="${CPPFLAGS}" \
		CFLAGS="${CFLAGS}" \
		LDFLAGS="${LDFLAGS}" \
		PATH="${PATH}" \
    		--prefix="${MK_PREFIX}" \
		--libdir="${MK_LIBDIR}" \
		--bindir="${MK_BINDIR}" \
		--sbindir="${MK_SBINDIR}" \
		--localstatedir="${MK_LOCALSTATEDIR}" \
		--sysconfdir="${MK_SYSCONFDIR}" \
		"$@" || mk_fail "configure failed"
	fi
    }

    auto_make_build()
    {
	if ${MAKE} -q >/dev/null 2>&1
	then
	    mk_log "Build is up to date"
	    mk_skip
	else
	    mk_build_command ${MAKE} "$@" || mk_fail "make failed"
	    touch "${MK_TARGET_DIR}/built-${MK_COMP}"
	fi
    }

    auto_make_stage()
    {
	if [ -f "${MK_TARGET_DIR}/built-${MK_COMP}" ]
	then
	    mk_safe_rm "${MK_TARGET_DIR}/built-${MK_COMP}"
	    mk_build_command ${MAKE} "$@" DESTDIR=${MK_COMP_STAGE_DIR} install || mk_fail "make install failed"
	else
	    mk_log "Staging is up to date"
	    mk_skip
	fi
    }

    auto_make_dist()
    {
	__srcdir="`mk_get_component_var "${MK_COMP}" "SOURCE_DIR"`"
	
	[ -z "${__srcdir}" ] && __srcdir="${MK_COMP}"

	__distdir="${MK_DIST_DIR}/${__srcdir}"

	mk_log "Generating source distribution in ${MK_DIST_DIRNAME}/${__srcdir}"

	${MAKE} distdir="${__distdir}" distdir
    }

    auto_generate_deps()
    {
	if ! mk_skipped
	then
	    mk_log "Updating component dependencies"
	    (
		echo "MK_DEPS_${MK_COMP} = \\"
		${MAKE} -q --debug=v,m 2>/dev/null | grep "Considering target file \`/" | sed -e "s/.*\`\([^']*\)'.*/    \1 \\\\/g" | sort | uniq
		echo '    $(__DUMMY__)'
	    ) > "${MK_TARGET_DIR}/deps-${MK_COMP}" || mk_fail "Could not generate dependencies"
	fi
    }

    auto_init()
    {
	mk_log "Running autotools"
	autoreconf -fi || mk_fail "autoreconf failed"
    }
}

pre_prepare()
{
    SHELL="${MK_SHELL}"
    CC="${MK_CC}"
    CFLAGS="${MK_CFLAGS}"
    CPPFLAGS="${MK_CPPFLAGS}"
    LDFLAGS="${MK_LDFLAGS}"
    PATH="$PATH"

    for __dep in ${MK_COMP_DEPENDS}
    do
	if [ "$__dep" != "$MK_COMP" ]
	then
	    if [ -d "${MK_STAGE_DIR}/${__dep}${MK_PREFIX}/include" ]
	    then
		CPPFLAGS="${CPPFLAGS} -I${MK_STAGE_DIR}/${__dep}${MK_PREFIX}/include"
	    fi
	    if [ -d "${MK_STAGE_DIR}/${__dep}${MK_LIBDIR}" ]
	    then
		LDFLAGS="${LDFLAGS} -L${MK_STAGE_DIR}/${__dep}${MK_LIBDIR}"
		if [ "${MK_OS}" = "linux" ]
		then
		    LDFLAGS="${LDFLAGS} -Wl,-rpath-link,${MK_STAGE_DIR}/${__dep}${MK_LIBDIR}"
		fi
	    fi
	    if [ -d "${MK_STAGE_DIR}/${__dep}${MK_BINDIR}" ]
	    then
		PATH="${PATH}:${MK_STAGE_DIR}/${__dep}${MK_BINDIR}"
	    fi
	fi
    done

    export SHELL CC CFLAGS CPPFLAGS LDFLAGS PATH
}

post_build()
{
    auto_generate_deps
}

post_stage()
{
    if ! mk_skipped
    then
	mk_log "Updating libtool archives"
	mk_log_enter "file"
	for __la in "${MK_COMP_STAGE_DIR}/${MK_LIBDIR}"/*.la
	do
	    if [ -f "${__la}" ]
	    then
		mk_log "`basename "${__la}"`"
		__deps="`(. "${__la}" && echo "${dependency_libs}")`"
		__newdeps=""
		for __dep in ${__deps}
		do
		    __newdep="`__libtool_rewrite_stage "$__dep"`"
		    __newdeps="$__newdeps $__newdep"
		done
		
		mk_sed_file "$__la" \
		    -e "s:^dependency_libs=.*$:dependency_libs=`mk_quote "$__newdeps"`:" \
		    -e "s:^installed=.*$:installed=no:"
	    fi
	done
	mk_log_leave
    fi
}

post_install()
{
    mk_log "Updating libtool archives"
    mk_log_enter "file"
    for __la in "${MK_COMP_STAGE_DIR}${MK_LIBDIR}"/*.la
    do
	# We found the file in the stage directory, so calculate
	# its location in the install directory
	__la="`echo "$__la" | sed "s:^${MK_COMP_STAGE_DIR}:${MK_COMP_INSTALL_DIR}:"`"

	if [ -f "${__la}" ]
	then
	    mk_log "`basename "${__la}"`"
	    __deps="`(. "${__la}" && echo "${dependency_libs}")`"
	    # Insert a reference to the final libdir for good measure
	    __newdeps="-L${MK_LIBDIR}"
	    for __dep in ${__deps}
	    do
		__newdep="`__libtool_rewrite_install "$__dep"`"
		__newdeps="$__newdeps $__newdep"
	    done
	    
	    mk_sed_file "$__la" \
		-e "s:^dependency_libs=.*$:dependency_libs=`mk_quote "$__newdeps"`:" \
		-e "s:^installed=.*$:installed=yes:"
	fi
    done
    mk_log_leave
}

default_init()
{
    auto_init
}

default_prepare()
{
    auto_configure
}

default_build()
{
    auto_make_build  
}

default_stage()
{
    auto_make_stage
}

default_dist()
{
    auto_make_dist
}
