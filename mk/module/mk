## 
##  metakit -- the extensible meta-build system
##  Copyright (C) Brian Koropoff
## 
##  This program is free software; you can redistribute it and/or
##  modify it under the terms of the GNU General Public License
##  as published by the Free Software Foundation; either version 2
##  of the License, or (at your option) any later version.
## 
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
## 
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, write to the Free Software
##  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
## 
##  The source code contained within this file is also subject to the
##  following additional terms:
## 
##  1. "Program" below refers to metakit or any derivative work thereof
##     under copyright law. "Unmodified" below refers to the Program
##     prior to any modification by the licensee, in a form which was
##     distributed while fully abiding by the terms of the GNU General
##     Public License and these additional clauses. "Unmodified Version"
##     refers to the Unmodified Program or the portion thereof from which
##     the licensee's modified version is derived.  Each licensee is
##     addressed as "you."
## 
##  2. As a special exception to the terms of the GNU General Public License,
##     you are granted unlimited permission to copy, distribute, and modify
##     the output of the Program, even when such output contains portions
##     of the Program source code which are otherwise governed by the terms
##     of the GNU General Public License.  When distributing a modified
##     version of the Program, you may choose to extend this special
##     exception to your modified version as well.
## 
##  3. The exception in clause 2 applies only to portions of the Program which
##     appear in a file containing these additional clauses.  You may not
##     extend this exception to portions of the Program which are contained
##     in a file that does not contain these clauses.  In addition, you may
##     not extend the exception to your modified version under any of the
##     following circumstances:
## 
##     a)  You move, copy, combine, or otherwise modify portions of the
##         Program such that a file is produced which:
##         
##         i.  Contains portions of the Program which, in the Unmodified
##             Version, were contained in a file which contained these
##             additional clauses; and
## 
##         ii. Contains portions of the Program which, in the Unmodified
##             Version, were contained in a file which did not contain these
##             additional clauses.
## 
##     b)  You modify the behavior of the Program such that it may copy portions
##         of the Program into its output where said portions, in the Unmodified
##         Version, were contained in a file which did not contain these clauses.
## 
##  4.  If any of the circumstances in clause 3 apply, you must remove these clauses
##      from the affected portions of your version of the Program in order to
##      distribute it.  In the case of (3.i), this means the offending file which
##      contains the inappropriately combined portions of the Program.  In the case
##      of (3.ii), it means the entirety of the Program.
## 

PHASES="init"
PHASE_INIT="always"

OPTIONS='
shell                     program      Set the name or path of the default
                                       Bourne-compatible shell
make                      program      Set the name or path of the default
                                       UNIX make utility
suppress-command-output   -            Suppress output of build commands
'

load()
{
    MK_TARGET_DIRNAME="target"
    MK_LOG_DIRNAME="log"
    MK_TARGET_DIR="${MK_WORK_DIR}/${MK_TARGET_DIRNAME}"
    MK_LOG_DIR="${MK_WORK_DIR}/${MK_LOG_DIRNAME}"

    mk_skip()
    {
	mk_log "Skipping rest of phase"
	MK_COMP_SKIP="true"
    }

    mk_skipped()
    {
	[ -n "${MK_COMP_SKIP}" ]
    }

    mk_disable_parallel()
    {
	__makeflags=""

	for __flag in ${MAKEFLAGS}
	do
	    case "${__flag}" in
		"--jobserver-fds="*|"-j")
		    : # Strip flag
		    ;;
		*)
		    __makeflags="$__makeflags $__flag"
		    ;;
	    esac
	done

	MK_ORIG_MAKEFLAGS="${MAKEFLAGS}"
	MAKEFLAGS="${__makeflags}"
	MFLAGS="- ${__makeflags}"
    }

    mk_is_parallel_make()
    {
	mk_contains "${MAKEFLAGS} ${MK_ORIG_MAKEFLAGS}" "-j"
    }

    mk_build_command()
    {
	if [ -n "${MK_SUPPRESS_BUILD_OUTPUT}" ]
	then
	    mk_show_args "$@" > /dev/null 2>&1
	else
	    mk_show_args "$@"
	fi
    }

    mk_on_phase_exit()
    {
	_status="$?"
	if [ -n "${MK_PHASE}" ] && mk_is_parallel_make
	then
	    # Restore old stdout and log end message
	    exec 1>&9
	    exec 9>&-
	    mk_log_reset
	    mk_log_enter "mk"
	    if [ "$_status" -eq 0 ]
	    then
		mk_log "<-- ${MK_PHASE} ${MK_COMP}"
	    else
		mk_log "!!! ${MK_PHASE} ${MK_COMP}"
		echo "[ Begin log: ${MK_PHASE} ${MK_COMP} ]"
		cat "${MK_LOG_DIR}/${MK_PHASE}-${MK_COMP}.log"
		echo "[ End log: ${MK_PHASE} ${MK_COMP} ]"
	    fi
	    mk_log_leave "mk"
	fi
	return "$_status"
    }

    if [ -n "${MK_PHASE}" ] && mk_is_parallel_make
    then
	mk_log "--> ${MK_PHASE} ${MK_COMP}"
	# Save our current stdout and redirect
	# stdout and stderr to a dedicated log file
	exec 9>&1
	exec 1>"${MK_LOG_DIR}/${MK_PHASE}-${MK_COMP}.log"
	exec 2>&1
	trap mk_on_phase_exit 0
    fi

    if [ -n "`mk_get_component_var ${MK_COMP} DISABLE_PARALLEL`" ]
    then
	mk_log "Disabling parallel make"
	mk_disable_parallel
    fi
}

configure()
{
    mk_check_program_path MK_INIT "mkinit" mkinit
    mk_check_program_path MK_SHELL "shell" bash sh || mk_fail "could not find a usable shell"
    mk_check_program MK_MAKE "make" gmake make || mk_fail "could not find a usable make program"

    if [ -n "$MK_INIT" ]
    then
	MK_INIT_YES=""
	MK_INIT_NO="##"
    else
	MK_INIT_YES="##"
	MK_INIT_NO=""
    fi

    MK_ACTION="${MK_WORK_DIR}/action"

    mk_define MK_ROOT_DIR MK_WORK_DIR MK_ACTION
    mk_define MK_SHELL MK_MAKE MK_SUPPRESS_COMMAND_OUTPUT MK_INIT MK_INIT_YES MK_INIT_NO
    mk_define MK_TARGET_DIR
    mk_define MK_LOG_DIR
}

output()
{
    for dir in "${MK_TARGET_DIRNAME}" "${MK_LOG_DIRNAME}"
    do
	mk_log "Creating directory ${dir}"
	mkdir -p "${MK_WORK_DIR}/${dir}"
    done
}